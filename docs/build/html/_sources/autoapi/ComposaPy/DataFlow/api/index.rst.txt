:py:mod:`ComposaPy.DataFlow.api`
================================

.. py:module:: ComposaPy.DataFlow.api


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ComposaPy.DataFlow.api.DataFlow




.. py:class:: DataFlow(session: ComposaPy.session.Session)

   Bases: :py:obj:`ComposaPy.mixins.PandasMixin`, :py:obj:`ComposaPy.api.ComposableApi`

   A wrapper class for DataFlow operations.

   .. py:method:: service(self) -> CompAnalytics.IServices.IApplicationService
      :property:

      A composable analytics csharp binding to the IServices.IApplicationService (otherwise
      known as a DataFlow service) object.


   .. py:method:: create(self, json: str = None, file_path: str = None) -> ComposaPy.DataFlow.models.DataFlowObject

      Takes a json formatted string or a local file path containing a valid json. Imports
      the dataflow using the dataflow service binding, and returns a DataFlowObject.
      Note that creating does not save the dataflow, the .save() method must be called on
      DataFlowObject to save it in your composable database.


   .. py:method:: run_status(self, run_id: int)

      Checks status of a run.

      Parameters
      (int) run_id: id of the run

      Return
      (int) run_id: associated run id


   .. py:method:: wait_for_run_execution(self, run_id: int) -> dict[str, int]

      Waits until run has finished.

      Parameters
      (int) run_id: id of the run

      Return
      (dict[str, int]) execution_status: status of the execution


   .. py:method:: run(self, dataflow_id: int, external_inputs: dict[str, any] = None) -> Optional[ComposaPy.DataFlow.models.RunSet]

      Runs a dataflow from the dataflow id (an invalid id will cause this method to return None).
      Any external modules (external int, table, file) that require outside input to run can be
      added using a dictionary with the module input's name and corresponding contract.



